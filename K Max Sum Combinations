

Input :  A[] : {4, 2, 5, 1}
         B[] : {8, 0, 3, 5}
         K : 3
Output : 13   // (A : 5) + (B : 8)
         12   // (A : 4) + (B :  8)
         10   // (A : 2) + (B : 8)



#include <bits/stdc++.h>
vector<int> kMaxSumCombination(vector<int> &a, vector<int> &b, int n, int k){

	sort(a.begin(),a.end());
	sort(b.begin(),b.end());

	priority_queue<pair<int,pair<int,int>>> pq;
	set<pair<int,int>> s;

	pq.push({a.back()+b.back(),{n-1,n-1}});
	s.insert({n-1,n-1});
	vector<int>ans;

	while(k--){
		auto num = pq.top();
		int sum = num.first;
		int i = num.second.first;
		int j = num.second.second;
		ans.push_back(sum);
		pq.pop();

		if(s.find({i-1,j}) == s.end()){
			pq.push({a[i-1]+b[j],{i-1,j}});
			s.insert({i-1,j});
		}
		
		if(s.find({i,j-1}) == s.end()){
			pq.push({a[i]+b[j-1],{i,j-1}});
			s.insert({i,j-1});
		}
	}
	return ans;
	
}



// A simple C++ program to find N maximum
// combinations from two arrays,
#include <bits/stdc++.h>
using namespace std;



void KMaxCombinations(int A[], int B[], 
					int N, int K)
{

	priority_queue<int> pq;

	for (int i = 0; i < N; i++)
		for (int j = 0; j < N; j++)
			pq.push(A[i] + B[j]);

	
	int count = 0;
	while (count < K) {
		cout << pq.top() << endl;
		pq.pop();
		count++;
	}
}


int main()
{
	int A[] = { 4, 2, 5, 1 };
	int B[] = { 8, 0, 5, 3 };
	int N = sizeof(A) / sizeof(A[0]);
	int K = 3;

	// Function call
	KMaxCombinations(A, B, N, K);
	return 0;
}
