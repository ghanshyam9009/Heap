Input: nums1 = [1,7,11], nums2 = [2,4,6], k = 3
Output: [[1,2],[1,4],[1,6]]
Explanation: The first 3 pairs are returned from the sequence: [1,2],[1,4],[1,6],[7,2],[7,4],[11,2],[7,6],[11,4],[11,6]



class Solution {
public:
    vector<vector<int>> kSmallestPairs(vector<int>& nums1, vector<int>& nums2, int k) {
        vector<vector<int>> ans;
        priority_queue<pair<int, pair<int,int>>> pq;
        for(auto i:nums1){
            for(auto j:nums2){
                long long int add=i+j;
                // if(pq.size()>k){
                //     if(pq.top().first>add){
                //         pq.pop();
                //         pq.push({add,{i,j}});
                //     }
                // }
                // else if(pq.size()<k){
                //     pq.push({add,{i,j}});
                // }
                if (pq.size()<k){
                    pq.push({add,{i,j}});
                }
                else if(add<pq.top().first){
                    pq.pop();
                    pq.push({add,{i,j}});
                }
                else{
                    break;
                }
            }
        }        
        for(int i=0;i<k;i++){
            vector<int>answer;
            pair<long long int,pair<int,int>> p = pq.top();
            pq.pop();
            answer.push_back(p.second.first);
            answer.push_back(p.second.second);
            ans.push_back(answer);
        }
        return ans;
    }
};
