/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* mergeKLists(vector<ListNode*>& lists) {

        if(lists.empty())
            return NULL;
        
        priority_queue<pair<int,int>,vector<pair<int,int>>,greater<pair<int,int>>> pq;

        for(int i=0;i<lists.size();i++)
        {
            if(lists[i] != nullptr)
            {
                pq.push({lists[i]->val,i});
            }
        }

        if(pq.empty())
            return NULL;

        ListNode*temp = new ListNode();
        ListNode*head = temp;

        while(true)
        {
            //it will be in pair
            auto it = pq.top();
            pq.pop();

            temp->val = it.first;

            if(lists[it.second]->next != nullptr)
            {
                lists[it.second] = lists[it.second]->next;
                pq.push({lists[it.second]->val,it.second});
            }
            
            if(!pq.empty())
            {
                temp->next = new ListNode();
                temp = temp->next;
            }

            else
            {
                break;
            }

        }

        return head;

    }
};


// approach 2

class Solution {
public:

    class compare
    {
        public:
        bool operator()(ListNode*a, ListNode*b)
        {
            return a->val > b->val;    
        }
    };

    ListNode* mergeKLists(vector<ListNode*>& lists) {
        
        priority_queue<ListNode*, vector<ListNode*>, compare> pq;

        int k=lists.size();

        if(k==0)
        {
            return NULL;
        }

        // step-1: 
        for(int i=0;i<k;i++)
        {
            if(lists[i]!=NULL)
            {
                pq.push(lists[i]);
            }
        }

        ListNode* head=NULL;
        ListNode* tail=NULL;

        while(!pq.empty())
        {
            ListNode* top=pq.top();
            pq.pop();

            if(top->next!=NULL)
            {
                pq.push(top->next);
            }

            if(head==NULL)
            {
                // ans LL is empty
                head=tail=top;
            }
            else
            {
                // insert in LL
                tail->next=top;
                tail=top;
            }
        }

        return head;
    }
};
