// maxheap   median    minheap

#include <bits/stdc++.h>
int signum(int a, int b) {

  if (a == b) {

    return 0;

  }

  else if (a < b) {

    return -1;

  } else {

    return 1;
  }
}

void call_med(vector<int> &arr, int el, priority_queue<int> &maxH,

              priority_queue<int, vector<int>, greater<int>> &minH,
              int &median) {

  switch (signum(maxH.size(), minH.size())) {

  case 0:
    if (el > median) {

      minH.push(el);

      median = minH.top();

    } else {

      maxH.push(el);

      median = maxH.top();
    }

    break;

  case 1:
    if (el > median) {

      minH.push(el);

      median = (minH.top() + maxH.top()) / 2;

    } else {

      // to maintail the diff bet maxH and minH to 1;

      minH.push(maxH.top());

      maxH.pop();

      maxH.push(el);

      median = (minH.top() + maxH.top()) / 2;
    }

    break;

  case -1:
    if (el > median) {

      // to maintail the diff bet maxH and minH to 1;

      maxH.push(minH.top());

      minH.pop();

      minH.push(el);

      median = (minH.top() + maxH.top()) / 2;

    } else {

      maxH.push(el);

      median = (minH.top() + maxH.top()) / 2;
    }

    break;
  }
}

vector<int> findMedian(vector<int> &arr, int n) {

  vector<int> ans;

  priority_queue<int> maxH;

  priority_queue<int, vector<int>, greater<int>> minH;

  int median = 0;

  for (int i = 0; i < n; i++) {

    call_med(arr, arr[i], maxH, minH, median);

    ans.push_back(median);
  }

  return ans;
}




// leetcode solution 

class MedianFinder {
private:
    priority_queue<int> maxHeap; // Stores the smaller half of numbers
    priority_queue<int, vector<int>, greater<int>> minHeap; // Stores the larger half of numbers
    double median;
public:
    MedianFinder() {
        
    }
    
    void addNum(int num) {
        // Add the number to the appropriate heap
        if (maxHeap.empty() || num <= maxHeap.top()) {
            maxHeap.push(num);
        } else {
            minHeap.push(num);
        }
        
        // Rebalance heaps if necessary
        if (maxHeap.size() > minHeap.size() + 1) {
            minHeap.push(maxHeap.top());
            maxHeap.pop();
        } else if (minHeap.size() > maxHeap.size()) {
            maxHeap.push(minHeap.top());
            minHeap.pop();
        }
    }
    
    double findMedian() {
        if (maxHeap.size() == minHeap.size()) {
            // If the number of elements is even, take the average of the two middle elements
            return (maxHeap.top() + minHeap.top()) / 2.0;
        } else {
            // If the number of elements is odd, the median is the top of the max heap
            return maxHeap.top();
        }
    }
};
