
Initialise a dummy node 
Linked List dummy_node = new Linked List();

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* merge(ListNode* list1, ListNode* list2) {

        // initialising result node
        ListNode* res = new ListNode(0);
        ListNode* tail = res;

        // if you had solved previous merge two sorted linked list
        // then this is easy to understand

        // here loop will execute until any of the list is not empty
        while (list1 != NULL && list2 != NULL) {

            if (list1->val <= list2->val) {
                tail->next = list1;
                list1 = list1->next;
            } else {
                tail->next = list2;
                list2 = list2->next;
            }
            // tail has to be incremented after every iteration
            // that's why it is kept outside of the if else statement
            tail = tail->next;
        }

        // if any of list becomes empty then append that list to the tail of the resultant list

        if (list1 == NULL)
            tail->next = list2;
        else
            tail->next = list1;

        return res->next;
    }

    ListNode* mergeKLists(vector<ListNode*> &lists) {

        // initialising result node

        // creating the dummy node is the common technique
        // to avoid any edge cases
        ListNode* res = new ListNode(0);

        for (ListNode* list: lists) {
            res->next = merge(res->next, list);
        }

        return res->next;
    }

 
};



// aproach 2

class Solution {
public:
    ListNode* partition(vector<ListNode*> lists, int start, int end) {
        if (start == end) 
            return lists[start];
        
        if (start < end) {
            
            int mid = start + (end - start) / 2;
            
            ListNode* l1 = partition(lists, start, mid);
            ListNode* l2 = partition(lists, mid + 1, end);
            
            return merge(l1, l2);
        } 
        else
            return NULL;
    }
 
    //This function is from Merge Two Sorted Lists.
    ListNode* merge(ListNode* l1, ListNode* l2) {
        if (l1 == NULL)
            return l2;
        
        if (l2 == NULL)
            return l1;
        
        if (l1->val < l2->val) {
            l1->next = merge(l1->next, l2);
            return l1;
        } 
        else {
            l2->next = merge(l1, l2->next);
            return l2;
        }
    }

    ListNode* mergeKLists(vector<ListNode*> &lists) {

       return partition(lists, 0, lists.size() - 1);
    }
 
};
